apiVersion: v1
kind: Namespace
metadata:
  name: ${FED_NS}
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: ${FED_NS}
  name: kubefed-admission-webhook-serving-cert
type: kubernetes.io/tls
stringData:
  tls.crt: "-----BEGIN CERTIFICATE-----
MIIC5zCCAc+gAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl
cm5ldGVzMB4XDTIxMDEwNTA2MzUwM1oXDTMxMDEwMzA2MzUwM1owFTETMBEGA1UE
AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANpY
gPNz0gtydlK9MYnx9tUNBxZNtHOMnSKa0F5sBEkqr8Llkv+YLpaE490MQcFtmszn
NB79vlOzxP+d+hZFF+pe+DobHat5ZIdw2Bfo9nul2lzgwhltqQfOvX9NYB+ejqjc
OkxY1cnwh6OeONQ9F7HTHhX74T4IUL/2iQYiZJmaqGJIVMjG59CPkuJsaxR+oBxA
MaeA4pqxK/mde8G1Cc77wAO0qQ6uVylKo7VZZp5oca2wL7BB85cJrRez4YjqrwZl
9iRXNqnRiX88dbDXfpH6vVv6y1moybGUOKLw3O8KrEt1E2iyNCcVUXiQGUGXRsdp
CYblMK3R1uuZfQTQMAcCAwEAAaNCMEAwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB
/wQFMAMBAf8wHQYDVR0OBBYEFEVP13u4sk2g4LFx4yP/6wHwVeEaMA0GCSqGSIb3
DQEBCwUAA4IBAQBtlCHtS2LGjSYCdIVk60yimCv6pMTrovB8nTcGwf9k/csSd4/c
tD8mf2ySFEfSc+7mU422c/b8BF0PbB8tzIryAP6pXamf4Ws+R4gdWdDIaCgylru7
XTdexK73VsVbRsbijvfXDjUibop+yYjxYv8kBEuRO0EMSMMkgXQstt5a2opkF9lM
ezN9EJz9H6PJU4wD1/2pWbRbFxJzrVTRgXXOusYXUauctA+Im2rbYdkcyJjRfI4M
WQPCP6b2a9/imbeNTRRwgzNcFEDxGiMFIDzUAUzMlp9kKvixlv8sK2FgBRzcaZpt
lHWIhWVxaPgLzhTh9D87l8wJnsWLcA1xxnGe
-----END CERTIFICATE-----"
  tls.key: "-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA2liA83PSC3J2Ur0xifH21Q0HFk20c4ydIprQXmwESSqvwuWS
/5guloTj3QxBwW2azOc0Hv2+U7PE/536FkUX6l74Ohsdq3lkh3DYF+j2e6XaXODC
GW2pB869f01gH56OqNw6TFjVyfCHo5441D0XsdMeFfvhPghQv/aJBiJkmZqoYkhU
yMbn0I+S4mxrFH6gHEAxp4DimrEr+Z17wbUJzvvAA7SpDq5XKUqjtVlmnmhxrbAv
sEHzlwmtF7PhiOqvBmX2JFc2qdGJfzx1sNd+kfq9W/rLWajJsZQ4ovDc7wqsS3UT
aLI0JxVReJAZQZdGx2kJhuUwrdHW65l9BNAwBwIDAQABAoIBADSCjlh+JSiNmXki
eNR09WidXnP1sg0L5wpYcv4SOiGie2yCq4x+e83FHcueU/4BrvXSMI23dltI43qZ
8ngCm9LIjifjN4pygkO0VrPBWe24oEAv6V4WKk1vYdFIuXJBPovLktWjk56iEuy9
c2tPWfBxFk4xKiUx+MGBt8ha4xixUDouYFluF+7R/JcvS2CRMuJTU6Q2TZXQLgWU
xrewyeptmy5VZm5GQ8dkwZCrC5gwkr+kZXl2qptzCi1BCMe4OD1+IKxWoKro2sDP
ZdD5uA28HcJCt4fXilqTuGn/Z1D3yUqlxyQS53c94eN3KDfprNpLjE+F7Kh/SvDf
oIlc6KECgYEA43irhFYEPZEVegMRj1JoH7+sCQ7A/u9Zpl4rACCKapus33ipKYcp
tducwgYjIjbioeqBNIOV+KtOAAVVKA0nJnXYIm7fCzv1Yygq7bkeF/gLMIp3YogD
wGpFBvKyckQQ6Mn8T3K2Wg+AVKE9L+1d9HTwni3902r52MF9q5orMPECgYEA9brX
GbSmSIR6FyoKValK0+viTWjyzAjORj+lrMGDebV7+RYzyKBfzqRj0N3NWhF3cBcC
ZKwwut/RFwSC+j8txvDmN3angCRWXWAlScjrp62aUSczoQq0L/uZ7TKop5JZo8K3
nJMt3tUk3NqOL5fsxh3F1owlOsFCx+17YgqDcHcCgYBREOQvWWhReK8quIU9iqTJ
C8oHwFZPhIVyoQS6Gt65d5l4WswOnLjksst+6ikDPIQwKB671FlSMdqubzgV+foF
3uGUA+dBXbDqEZqa9eofqKp0NiSt3MNZg4XuH/gweMl97N4agksydWvKvVvNBM8D
G9nUxZc8DVfVQ7/BtEPIQQKBgDE0V4wTK1TMCjKHPYiHnK8wxaDgifWnMb7JUeB0
42HEoG1xL69Vxbl4G3CgaVVGuBbe1KDaBev1k0W7pop7iiwS4tZqUQIMxKpv7SeI
Lv/leEgVxHXT0d7lz526jiD34jEzdVbJ9d5v6bC7pssK7eOB5LKgX3gTaM7l09X+
6vDjAoGBAI1HhtKkOhreuNy+wiz0p1z/DyXaqSobukSEQxOsMyaOiVNYG1wCBRVQ
LBDeijrRFGcsWku9OEHuyqMrLvp54b9QnMJwqDP8pyly1j4YveDe3icZ+EC7yQs1
iZtWcqaiqXSYBp2oo4GNqHeE+BYtiXcJn4tjBkufbDKiOQeMAzJ0
-----END RSA PRIVATE KEY-----
"
---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-controller
  namespace: ${FED_NS}
---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: ${FED_NS}
  name: kubefed-admission-webhook
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kubefed-admin
rules:
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kubefed-view
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: kubefed-edit
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - create
  - update
  - delete
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - delete
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - delete
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
# This role provides the necessary permissions to create admission reviews.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: system:kubefed:admission-requester

rules:
- apiGroups:
  - validation.core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - create
- apiGroups:
  - mutation.core.kubefed.io
  resources:
  - kubefedconfigs
  verbs:
  - create
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-role
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - create
  - update
  - patch
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubefed-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubefed-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: ${FED_NS}
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
# This clusterrolebinding grants permissions for the admission webhook to create
# admission reviews on behalf of the system:anonymous user.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:anonymous-auth

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:kubefed:admission-requester

subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:anonymous
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# name using the namespace. This is needed because admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:auth-delegator

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: ${FED_NS}
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-config-role
  namespace: ${FED_NS}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
# Only need access to these core namespaced resources in the KubeFed system
# namespace regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-admission-webhook-role
  namespace: ${FED_NS}
rules:
- apiGroups:
  - core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Allow the admission webhook to read the config for terminating
# authentication.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique resource name in
# the kube-system namespace using the namespace. This is needed because
# admission-webhooks do not currently support the ability to have
# namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:apiextension-viewer

  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: ${FED_NS}
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Grant admission webhook access to core.kubefed.io in the KubeFed system
# namespace only, regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-admission-webhook-rolebinding
  namespace: ${FED_NS}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-admission-webhook-role
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: ${FED_NS}
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-rolebinding
  namespace: ${FED_NS}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: ${FED_NS}
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-controller-manager-metrics-service
  namespace: ${FED_NS}
  annotations:
    prometheus.io/port: "9090"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
spec:
  selector:
    kubefed-control-plane: "controller-manager"
  ports:
  - name: metrics
    port: 9090
    targetPort: metrics
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-admission-webhook
  namespace: ${FED_NS}
spec:
  selector:
    kubefed-admission-webhook: "true"
  ports:
  - port: 443
    targetPort: 8443
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${FED_NS}
  name: kubefed-admission-webhook
  labels:
    kubefed-admission-webhook: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      kubefed-admission-webhook: "true"
  template:
    metadata:
      labels:
        kubefed-admission-webhook: "true"
    spec:
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-admission-webhook
      containers:
      - name: admission-webhook
        image: "quay.io/kubernetes-multicluster/kubefed:${FED_VERSION}"
        imagePullPolicy: "IfNotPresent"
        command:
        - "/hyperfed/webhook"
        - "--secure-port=8443"
        - "--audit-log-path=-"
        - "--tls-cert-file=/var/serving-cert/tls.crt"
        - "--tls-private-key-file=/var/serving-cert/tls.key"
        - "--v=8"
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubefed-admission-webhook-serving-cert
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubefed-controller-manager
  namespace: ${FED_NS}
  labels:
    kubefed-control-plane: controller-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      kubefed-control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      labels:
        kubefed-control-plane: controller-manager
    spec:
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-controller
      containers:
      - command:
        - /hyperfed/controller-manager
        image: "quay.io/kubernetes-multicluster/kubefed:${FED_VERSION}"
        imagePullPolicy: "IfNotPresent"
        name: controller-manager
        ports:
        - containerPort: 9090
          name: metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 3
        resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
            
      terminationGracePeriodSeconds: 10
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: services
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedService
    pluralName: federatedservices
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Service
    pluralName: services
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: jobs.batch
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedJob
    pluralName: federatedjobs
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: batch
    kind: Job
    pluralName: jobs
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: namespaces
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedNamespace
    pluralName: federatednamespaces
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Namespace
    pluralName: namespaces
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: replicasets.apps
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedReplicaSet
    pluralName: federatedreplicasets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: ReplicaSet
    pluralName: replicasets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: serviceaccounts
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedServiceAccount
    pluralName: federatedserviceaccounts
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ServiceAccount
    pluralName: serviceaccounts
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: ingresses.extensions
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedIngress
    pluralName: federatedingresses
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: extensions
    kind: Ingress
    pluralName: ingresses
    scope: Namespaced
    version: v1beta1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: configmaps
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedConfigMap
    pluralName: federatedconfigmaps
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ConfigMap
    pluralName: configmaps
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: secrets
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedSecret
    pluralName: federatedsecrets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Secret
    pluralName: secrets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: clusterroles.rbac.authorization.k8s.io
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedClusterRole
    pluralName: federatedclusterroles
    scope: Cluster
    version: v1beta1
  propagation: Enabled
  targetType:
    group: rbac.authorization.k8s.io
    kind: ClusterRole
    pluralName: clusterroles
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: deployments.apps
  namespace: ${FED_NS}
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedDeployment
    pluralName: federateddeployments
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: Deployment
    pluralName: deployments
    scope: Namespaced
    version: v1
---
# Source: kubefed/charts/controllermanager/templates/kubefedconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: KubeFedConfig
metadata:
  name: kubefed
  namespace: ${FED_NS}
spec:
  scope: "Cluster"
  controllerDuration:
    availableDelay: "20s"
    unavailableDelay: "60s"
  leaderElect:
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "5s"
    resourceLock: "configmaps"
  clusterHealthCheck:
    period: "10s"
    failureThreshold: 3
    successThreshold: 1
    timeout: "3s"
  syncController:
    adoptResources: "Enabled"
  featureGates:
  - name: PushReconciler
    configuration: "Enabled"
  - name: SchedulerPreferences
    configuration: "Enabled"
  - name: CrossClusterServiceDiscovery
    configuration: "Enabled"
  - name: FederatedIngress
    configuration: "Enabled"
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
# The same comments for ValidatingWebhookConfiguration apply here to
# MutatingWebhookConfiguration.
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: mutation.core.kubefed.io

webhooks:
- name: kubefedconfigs.core.kubefed.io
  clientConfig:
    service:
      namespace: "${FED_NS}"
      name: kubefed-admission-webhook
      path: /apis/mutation.core.kubefed.io/v1beta1/kubefedconfigs
    caBundle: "TUlJQzV6Q0NBYytnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFzRkFEQVZNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSXhNREV3TlRBMk16VXdNMW9YRFRNeE1ERXdNekEyTXpVd00xb3dGVEVUTUJFR0ExVUVBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnBZZ1BOejBndHlkbEs5TVlueDl0VU5CeFpOdEhPTW5TS2EwRjVzQkVrcXI4TGxrditZTHBhRTQ5ME1RY0Z0bXN6bk5CNzl2bE96eFArZCtoWkZGK3BlK0RvYkhhdDVaSWR3MkJmbzludWwybHpnd2hsdHFRZk92WDlOWUIrZWpxamNPa3hZMWNud2g2T2VPTlE5RjdIVEhoWDc0VDRJVUwvMmlRWWlaSm1hcUdKSVZNakc1OUNQa3VKc2F4UitvQnhBTWFlQTRwcXhLL21kZThHMUNjNzd3QU8wcVE2dVZ5bEtvN1ZaWnA1b2NhMndMN0JCODVjSnJSZXo0WWpxcndabDlpUlhOcW5SaVg4OGRiRFhmcEg2dlZ2NnkxbW95YkdVT0tMdzNPOEtyRXQxRTJpeU5DY1ZVWGlRR1VHWFJzZHBDWWJsTUszUjF1dVpmUVRRTUFjQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkVWUDEzdTRzazJnNExGeDR5UC82d0h3VmVFYU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnRsQ0h0UzJMR2pTWUNkSVZrNjB5aW1DdjZwTVRyb3ZCOG5UY0d3ZjlrL2NzU2Q0L2N0RDhtZjJ5U0ZFZlNjKzdtVTQyMmMvYjhCRjBQYkI4dHpJcnlBUDZwWGFtZjRXcytSNGdkV2RESWFDZ3lscnU3WFRkZXhLNzNWc1ZiUnNiaWp2ZlhEalVpYm9wK3lZanhZdjhrQkV1Uk8wRU1TTU1rZ1hRc3R0NWEyb3BrRjlsTWV6TjlFSno5SDZQSlU0d0QxLzJwV2JSYkZ4SnpyVlRSZ1hYT3VzWVhVYXVjdEErSW0ycmJZZGtjeUpqUmZJNE1XUVBDUDZiMmE5L2ltYmVOVFJSd2d6TmNGRUR4R2lNRklEelVBVXpNbHA5a0t2aXhsdjhzSzJGZ0JSemNhWnB0bEhXSWhXVnhhUGdMemhUaDlEODdsOHdKbnNXTGNBMXh4bkdlCg=="
  rules:
  - operations:
    - CREATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# using the namespace.
  name: validations.core.kubefed.io

webhooks:
- name: federatedtypeconfigs.core.kubefed.io
  clientConfig:
    service:
      namespace: "${FED_NS}"
      name: kubefed-admission-webhook
      path: /apis/validation.core.kubefed.io/v1beta1/federatedtypeconfigs
    caBundle: "TUlJQzV6Q0NBYytnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFzRkFEQVZNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSXhNREV3TlRBMk16VXdNMW9YRFRNeE1ERXdNekEyTXpVd00xb3dGVEVUTUJFR0ExVUVBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnBZZ1BOejBndHlkbEs5TVlueDl0VU5CeFpOdEhPTW5TS2EwRjVzQkVrcXI4TGxrditZTHBhRTQ5ME1RY0Z0bXN6bk5CNzl2bE96eFArZCtoWkZGK3BlK0RvYkhhdDVaSWR3MkJmbzludWwybHpnd2hsdHFRZk92WDlOWUIrZWpxamNPa3hZMWNud2g2T2VPTlE5RjdIVEhoWDc0VDRJVUwvMmlRWWlaSm1hcUdKSVZNakc1OUNQa3VKc2F4UitvQnhBTWFlQTRwcXhLL21kZThHMUNjNzd3QU8wcVE2dVZ5bEtvN1ZaWnA1b2NhMndMN0JCODVjSnJSZXo0WWpxcndabDlpUlhOcW5SaVg4OGRiRFhmcEg2dlZ2NnkxbW95YkdVT0tMdzNPOEtyRXQxRTJpeU5DY1ZVWGlRR1VHWFJzZHBDWWJsTUszUjF1dVpmUVRRTUFjQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkVWUDEzdTRzazJnNExGeDR5UC82d0h3VmVFYU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnRsQ0h0UzJMR2pTWUNkSVZrNjB5aW1DdjZwTVRyb3ZCOG5UY0d3ZjlrL2NzU2Q0L2N0RDhtZjJ5U0ZFZlNjKzdtVTQyMmMvYjhCRjBQYkI4dHpJcnlBUDZwWGFtZjRXcytSNGdkV2RESWFDZ3lscnU3WFRkZXhLNzNWc1ZiUnNiaWp2ZlhEalVpYm9wK3lZanhZdjhrQkV1Uk8wRU1TTU1rZ1hRc3R0NWEyb3BrRjlsTWV6TjlFSno5SDZQSlU0d0QxLzJwV2JSYkZ4SnpyVlRSZ1hYT3VzWVhVYXVjdEErSW0ycmJZZGtjeUpqUmZJNE1XUVBDUDZiMmE5L2ltYmVOVFJSd2d6TmNGRUR4R2lNRklEelVBVXpNbHA5a0t2aXhsdjhzSzJGZ0JSemNhWnB0bEhXSWhXVnhhUGdMemhUaDlEODdsOHdKbnNXTGNBMXh4bkdlCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - federatedtypeconfigs
    - federatedtypeconfigs/status
  failurePolicy: Fail
- name: kubefedclusters.core.kubefed.io
  clientConfig:
    service:
      namespace: "${FED_NS}"
      name: kubefed-admission-webhook
      path: /apis/validation.core.kubefed.io/v1beta1/kubefedclusters
    caBundle: "TUlJQzV6Q0NBYytnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFzRkFEQVZNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSXhNREV3TlRBMk16VXdNMW9YRFRNeE1ERXdNekEyTXpVd00xb3dGVEVUTUJFR0ExVUVBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnBZZ1BOejBndHlkbEs5TVlueDl0VU5CeFpOdEhPTW5TS2EwRjVzQkVrcXI4TGxrditZTHBhRTQ5ME1RY0Z0bXN6bk5CNzl2bE96eFArZCtoWkZGK3BlK0RvYkhhdDVaSWR3MkJmbzludWwybHpnd2hsdHFRZk92WDlOWUIrZWpxamNPa3hZMWNud2g2T2VPTlE5RjdIVEhoWDc0VDRJVUwvMmlRWWlaSm1hcUdKSVZNakc1OUNQa3VKc2F4UitvQnhBTWFlQTRwcXhLL21kZThHMUNjNzd3QU8wcVE2dVZ5bEtvN1ZaWnA1b2NhMndMN0JCODVjSnJSZXo0WWpxcndabDlpUlhOcW5SaVg4OGRiRFhmcEg2dlZ2NnkxbW95YkdVT0tMdzNPOEtyRXQxRTJpeU5DY1ZVWGlRR1VHWFJzZHBDWWJsTUszUjF1dVpmUVRRTUFjQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkVWUDEzdTRzazJnNExGeDR5UC82d0h3VmVFYU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnRsQ0h0UzJMR2pTWUNkSVZrNjB5aW1DdjZwTVRyb3ZCOG5UY0d3ZjlrL2NzU2Q0L2N0RDhtZjJ5U0ZFZlNjKzdtVTQyMmMvYjhCRjBQYkI4dHpJcnlBUDZwWGFtZjRXcytSNGdkV2RESWFDZ3lscnU3WFRkZXhLNzNWc1ZiUnNiaWp2ZlhEalVpYm9wK3lZanhZdjhrQkV1Uk8wRU1TTU1rZ1hRc3R0NWEyb3BrRjlsTWV6TjlFSno5SDZQSlU0d0QxLzJwV2JSYkZ4SnpyVlRSZ1hYT3VzWVhVYXVjdEErSW0ycmJZZGtjeUpqUmZJNE1XUVBDUDZiMmE5L2ltYmVOVFJSd2d6TmNGRUR4R2lNRklEelVBVXpNbHA5a0t2aXhsdjhzSzJGZ0JSemNhWnB0bEhXSWhXVnhhUGdMemhUaDlEODdsOHdKbnNXTGNBMXh4bkdlCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedclusters
    - kubefedclusters/status
  failurePolicy: Fail
- name: kubefedconfigs.core.kubefed.io
  clientConfig:
    service:
      namespace: "${FED_NS}"
      name: kubefed-admission-webhook
      path: /apis/validation.core.kubefed.io/v1beta1/kubefedconfigs
    caBundle: "TUlJQzV6Q0NBYytnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFzRkFEQVZNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSXhNREV3TlRBMk16VXdNMW9YRFRNeE1ERXdNekEyTXpVd00xb3dGVEVUTUJFR0ExVUVBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnBZZ1BOejBndHlkbEs5TVlueDl0VU5CeFpOdEhPTW5TS2EwRjVzQkVrcXI4TGxrditZTHBhRTQ5ME1RY0Z0bXN6bk5CNzl2bE96eFArZCtoWkZGK3BlK0RvYkhhdDVaSWR3MkJmbzludWwybHpnd2hsdHFRZk92WDlOWUIrZWpxamNPa3hZMWNud2g2T2VPTlE5RjdIVEhoWDc0VDRJVUwvMmlRWWlaSm1hcUdKSVZNakc1OUNQa3VKc2F4UitvQnhBTWFlQTRwcXhLL21kZThHMUNjNzd3QU8wcVE2dVZ5bEtvN1ZaWnA1b2NhMndMN0JCODVjSnJSZXo0WWpxcndabDlpUlhOcW5SaVg4OGRiRFhmcEg2dlZ2NnkxbW95YkdVT0tMdzNPOEtyRXQxRTJpeU5DY1ZVWGlRR1VHWFJzZHBDWWJsTUszUjF1dVpmUVRRTUFjQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkVWUDEzdTRzazJnNExGeDR5UC82d0h3VmVFYU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnRsQ0h0UzJMR2pTWUNkSVZrNjB5aW1DdjZwTVRyb3ZCOG5UY0d3ZjlrL2NzU2Q0L2N0RDhtZjJ5U0ZFZlNjKzdtVTQyMmMvYjhCRjBQYkI4dHpJcnlBUDZwWGFtZjRXcytSNGdkV2RESWFDZ3lscnU3WFRkZXhLNzNWc1ZiUnNiaWp2ZlhEalVpYm9wK3lZanhZdjhrQkV1Uk8wRU1TTU1rZ1hRc3R0NWEyb3BrRjlsTWV6TjlFSno5SDZQSlU0d0QxLzJwV2JSYkZ4SnpyVlRSZ1hYT3VzWVhVYXVjdEErSW0ycmJZZGtjeUpqUmZJNE1XUVBDUDZiMmE5L2ltYmVOVFJSd2d6TmNGRUR4R2lNRklEelVBVXpNbHA5a0t2aXhsdjhzSzJGZ0JSemNhWnB0bEhXSWhXVnhhUGdMemhUaDlEODdsOHdKbnNXTGNBMXh4bkdlCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
